
services:
  # Serviço para o banco de dados PostgreSQL
  musiki-db:
    image: postgres:14
    ports:
      - "5433:5432"  # Se não houver conflito, pode ser 5432:5432
    environment:
      POSTGRES_DB: musiki
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - musiki-network

  # Serviço para o backend (Spring Boot)
  spring-app:
    build:
      context: ./musikiAPI
      dockerfile: Dockerfile  # Caminho para o Dockerfile do Spring Boot
    image: musiki-app:latest  # Nome da imagem para o backend
    ports:
      - "8080:8080"  # Porta que o Spring Boot estará ouvindo
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://musiki-db:5432/musiki
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345
    depends_on:
      - musiki-db  # Garante que o banco de dados esteja rodando antes de iniciar o Spring Boot
    networks:
      - musiki-network

  # Serviço para o frontend (React)
  spa-app:
    build:
      context: ./musikiprimefaces
      dockerfile: Dockerfile  # Caminho para o Dockerfile do React
    image: musiki-primefaces:latest  # Nome da imagem para o frontend React
    ports:
      - "5000:5000"  # Porta que o React estará ouvindo
    depends_on:
      - spring-app  # Garante que o backend esteja rodando antes de iniciar o frontend
    networks:
      - musiki-network

volumes:
  postgres-data:  # Volume para persistir os dados do banco
    driver: local

networks:
  musiki-network:
    driver: bridge