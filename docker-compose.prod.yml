services:
  # Serviço para o banco de dados PostgreSQL
  musiki-db:
    container_name: musiki-database
    image: postgres:14
    ports:
      - "5433:${DB_PORT}"  # Mapeando a porta do PostgreSQL (5433 no host para 5432 no container)
    environment:
      POSTGRES_DB: ${DB_NAME}  # Usando a variável DB_NAME do .env
      POSTGRES_USER: ${DB_USER}  # Usando a variável DB_USER do .env
      POSTGRES_PASSWORD: ${DB_PASSWORD}  # Usando a variável DB_PASSWORD do .env
    volumes:
      - postgres-data:/var/lib/postgresql/data  # Persistência dos dados do banco
    networks:
      - musiki-network

  # Serviço para o backend (Spring Boot)
  spring-app:
    container_name: musiki-backend
    build:
      context: ./musikiAPI
      dockerfile: Dockerfile
    image: musiki-app:latest
    expose:
      - "8080"  # Porta interna para NGINX
    environment:
      SERVER_PORT: ${SERVER_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://musiki-db:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
    depends_on:
      - musiki-db
    networks:
      - musiki-network

  # Serviço para o frontend (React)
  spa-app:
    container_name: musiki-frontend
    build:
      context: ./musikiprimefaces
      dockerfile: Dockerfile
    image: musiki-primefaces:latest
    expose:
      - "3000"
    command: ["serve", "-s", "build", "-l", "3000"]
    env_file:
      - ./musikiprimefaces/.env
    depends_on:
      - spring-app
    networks:
      - musiki-network

  nginx:
    image: nginx:latest
    container_name: musiki-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    depends_on:
      - spring-app
      - spa-app
    networks:
      - musiki-network
    restart: always
  
  certbot-init:
    image: certbot/certbot
    container_name: certbot-init
    volumes:
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    command:
      - certonly
      - --webroot
      - -w
      - /var/www/certbot
      - --email
      - ${CERTBOT_EMAIL}
      - --agree-tos
      - --no-eff-email
      - -d
      - ${NGINX_HOSTNAME}
    depends_on:
      - nginx
    networks:
      - musiki-network
    restart: "no"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    entrypoint: >
      /bin/sh -c 'trap exit TERM; while :; do sleep 6h & wait $${!}; certbot renew --webroot -w /var/www/certbot; done'
    networks:
      - musiki-network
    restart: always

networks:
  musiki-network:
    driver: bridge

# Definição dos volumes
volumes:
  postgres-data:
    driver: local