#!/bin/bash

# =============================================================================
# SCRIPT DE INICIALIZA√á√ÉO - PROJETO MUSIKI (MELHORADO)
# =============================================================================

# Configura√ß√µes
COMPOSE_FILE="docker-compose.prod.yml"
ENV_FILE=".env"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
MAGENTA='\033[0;95m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Verifica√ß√µes iniciais
check_prerequisites() {
    log_step "Verificando pr√©-requisitos..."

    # Verificar Docker
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker n√£o est√° rodando!"
        exit 1
    fi

    # Verificar Docker Compose
    if ! docker compose version > /dev/null 2>&1; then
        log_error "Docker Compose n√£o est√° instalado!"
        exit 1
    fi

    # Verificar arquivo compose
    if [ ! -f "$COMPOSE_FILE" ]; then
        log_error "Arquivo $COMPOSE_FILE n√£o encontrado!"
        exit 1
    fi

    # Verificar arquivo .env
    if [ ! -f "$ENV_FILE" ]; then
        log_warn "Arquivo .env n√£o encontrado!"
        log_info "Criando arquivo .env de exemplo..."
        create_env_example
    fi

    # Criar estrutura de diret√≥rios
    create_directory_structure
}

create_env_example() {
    cat > .env << EOF
# Database Configuration
DB_NAME=musiki
DB_USER=postgres
DB_PASSWORD=postgres123
DB_PORT=5432

# Server Configuration
SERVER_PORT=8080

# Spotify API Configuration
SPOTIFY_CLIENT_ID=your_spotify_client_id_here
SPOTIFY_CLIENT_SECRET=your_spotify_client_secret_here

# SSL Configuration
CERTBOT_EMAIL=your-email@example.com
NGINX_HOSTNAME=samm.dev.br
EOF
    
    log_warn "Arquivo .env criado! Configure suas vari√°veis antes de continuar."
    log_info "Especialmente: SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, CERTBOT_EMAIL"
}

create_directory_structure() {
    log_info "Criando estrutura de diret√≥rios..."
    
    mkdir -p nginx/certbot/{www,conf}
    
    # Verificar se nginx.conf existe
    if [ ! -f "./nginx/nginx.conf" ]; then
        log_warn "Arquivo nginx.conf n√£o encontrado!"
        log_info "Por favor, coloque o arquivo nginx.conf no diret√≥rio ./nginx/"
        log_info "Use o arquivo corrigido fornecido."
        exit 1
    fi
}

# Fun√ß√£o para inicializar sem SSL
start_without_ssl() {
    log_step "Iniciando aplica√ß√£o SEM SSL..."
    
    # Parar containers existentes
    docker compose -f $COMPOSE_FILE down --remove-orphans
    
    # Limpar volumes √≥rf√£os
    docker volume prune -f
    
    # Construir e iniciar servi√ßos essenciais
    log_info "Construindo e iniciando servi√ßos..."
    docker compose -f $COMPOSE_FILE up -d musiki-db spring-app spa-app nginx
    
    # Aguardar servi√ßos ficarem prontos
    log_info "Aguardando servi√ßos ficarem prontos..."
    sleep 30
    
    # Verificar status
    check_services_status
}

# Fun√ß√£o para configurar SSL
setup_ssl() {
    log_step "Configurando SSL..."
    
    # Verificar se certificado j√° existe
    if [ -d "./nginx/certbot/conf/live/samm.dev.br" ]; then
        log_info "Certificado SSL j√° existe!"
        start_ssl_renewal
        return 0
    fi
    
    log_info "Obtendo certificado SSL..."
    log_warn "IMPORTANTE: Certifique-se que samm.dev.br aponta para este servidor!"
    
    # Obter certificado inicial
    if docker compose -f $COMPOSE_FILE --profile ssl-init run --rm certbot-init; then
        log_info "Certificado SSL obtido com sucesso!"
        
        # Recarregar NGINX
        docker compose -f $COMPOSE_FILE exec nginx nginx -s reload
        
        # Iniciar renova√ß√£o autom√°tica
        start_ssl_renewal
        
        return 0
    else
        log_error "Falha ao obter certificado SSL!"
        log_warn "Continuando sem SSL..."
        return 1
    fi
}

start_ssl_renewal() {
    log_info "Iniciando renova√ß√£o autom√°tica de SSL..."
    docker compose -f $COMPOSE_FILE --profile ssl-renewal up -d certbot
}

# Verificar status dos servi√ßos
check_services_status() {
    log_step "Verificando status dos servi√ßos..."
    
    services=("musiki-db" "spring-app" "spa-app" "nginx")
    all_healthy=true
    
    for service in "${services[@]}"; do
        if docker compose -f $COMPOSE_FILE ps $service | grep -q "Up"; then
            log_info "‚úÖ $service est√° rodando"
        else
            log_error "‚ùå $service n√£o est√° rodando"
            all_healthy=false
        fi
    done
    
    if $all_healthy; then
        log_info "üéâ Todos os servi√ßos est√£o rodando!"
        show_access_info
    else
        log_warn "‚ö†Ô∏è  Alguns servi√ßos t√™m problemas. Verificando logs..."
        show_problematic_logs
    fi
}

show_access_info() {
    echo ""
    echo "=============================================="
    echo "         MUSIKI - INFORMA√á√ïES DE ACESSO"
    echo "=============================================="
    
    # Testar conectividade
    http_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80 2>/dev/null || echo "000")
    
    if [ "$http_status" != "000" ]; then
        echo "üåê Aplica√ß√£o dispon√≠vel em:"
        echo "   HTTP:  http://localhost"
        echo "   HTTP:  http://samm.dev.br (se DNS configurado)"
        
        if [ -d "./nginx/certbot/conf/live/samm.dev.br" ]; then
            echo "   HTTPS: https://samm.dev.br"
        fi
    else
        echo "‚ö†Ô∏è  Aplica√ß√£o n√£o est√° respondendo na porta 80"
    fi
    
    echo ""
    echo "üóÑÔ∏è  Database (externo): localhost:5433"
    echo ""
    echo "üìã Comandos √∫teis:"
    echo "   Ver logs:           docker compose -f $COMPOSE_FILE logs -f [servi√ßo]"
    echo "   Parar aplica√ß√£o:    docker compose -f $COMPOSE_FILE down"
    echo "   Reiniciar servi√ßo:  docker compose -f $COMPOSE_FILE restart [servi√ßo]"
    echo "=============================================="
}

show_problematic_logs() {
    services=("musiki-db" "spring-app" "spa-app" "nginx")
    
    for service in "${services[@]}"; do
        if ! docker compose -f $COMPOSE_FILE ps $service | grep -q "Up"; then
            echo ""
            log_error "Logs do $service:"
            docker compose -f $COMPOSE_FILE logs --tail=10 $service
        fi
    done
}

# Menu principal
show_menu() {
    echo ""
    echo "=============================================="
    echo "         MUSIKI - SCRIPT DE INICIALIZA√á√ÉO"
    echo "=============================================="
    echo ""
    echo "Escolha uma op√ß√£o:"
    echo "1) Iniciar aplica√ß√£o (HTTP apenas)"
    echo "2) Iniciar aplica√ß√£o com SSL"
    echo "3) Renovar certificado SSL"
    echo "4) Ver logs dos servi√ßos"
    echo "5) Parar aplica√ß√£o"
    echo "6) Status dos servi√ßos"
    echo "0) Sair"
    echo ""
    read -p "Digite sua escolha [0-6]: " choice
}

handle_menu_choice() {
    case $choice in
        1)
            start_without_ssl
            ;;
        2)
            start_without_ssl
            setup_ssl
            ;;
        3)
            setup_ssl
            ;;
        4)
            echo ""
            echo "Servi√ßos dispon√≠veis: musiki-db, spring-app, spa-app, nginx, certbot"
            read -p "Digite o nome do servi√ßo (ou ENTER para todos): " service_name
            if [ -z "$service_name" ]; then
                docker compose -f $COMPOSE_FILE logs -f --tail=30
            else
                docker compose -f $COMPOSE_FILE logs -f --tail=30 $service_name
            fi
            ;;
        5)
            log_info "Parando aplica√ß√£o..."
            docker compose -f $COMPOSE_FILE down
            log_info "Aplica√ß√£o parada!"
            ;;
        6)
            check_services_status
            ;;
        0)
            log_info "Saindo..."
            exit 0
            ;;
        *)
            log_error "Op√ß√£o inv√°lida!"
            ;;
    esac
}

# =============================================================================
# EXECU√á√ÉO PRINCIPAL
# =============================================================================

# Verificar pr√©-requisitos
check_prerequisites

# Se argumentos foram passados, executar diretamente
if [ $# -gt 0 ]; then
    case $1 in
        "start")
            start_without_ssl
            ;;
        "start-ssl")
            start_without_ssl
            setup_ssl
            ;;
        "ssl-only")
            setup_ssl
            ;;
        "stop")
            docker compose -f $COMPOSE_FILE down
            ;;
        "status")
            check_services_status
            ;;
        *)
            echo "Uso: $0 [start|start-ssl|ssl-only|stop|status]"
            exit 1
            ;;
    esac
    exit 0
fi

# Menu interativo
while true; do
    show_menu
    handle_menu_choice
    echo ""
    read -p "Pressione ENTER para continuar..."
done